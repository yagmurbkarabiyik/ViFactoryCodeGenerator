using Mapster;
using System.Net;
using [CurrentProjectName].Bll.Dtos;
using [CurrentProjectName].Bll.Models;
using [CurrentProjectName].Bll.Services.Abstract;
using [CurrentProjectName].Bll.Enums;
using [CurrentProjectName].Core.Models;
using [CurrentProjectName].Core.Services;
using [CurrentProjectName].Dal.Data.IDalRepos;
using [CurrentProjectName].Domain.Entities;
using [CurrentProjectName].Core.Models.RepositoryModels;
using [CurrentProjectName].Core.RepositoryModels;

using Microsoft.EntityFrameworkCore;

namespace [CurrentProjectName].Bll.Services.Concrete
{
    public class [EntityName]Service : I[EntityName]Service
    {

		private readonly I[EntityName]Repository _repository;
		private readonly IUnitOfWork _unitOfWork;

		public [EntityName]Service(I[EntityName]Repository repository, IUnitOfWork unitOfWork)
		{
			_repository = repository;
			_unitOfWork = unitOfWork;
		}

		public async Task<ResponseCommon<[EntityName]CreateDto>> Create([EntityName]CreateDto model)
		{
			var entity = model.Adapt<[EntityName]>();
			_repository.Create(new RepositoryCreateRequest<[EntityName]> { Model = entity });

			var query = await _unitOfWork.SaveChangesAsync();

			if (query.Exception != null || query.Result < 1)
				throw new ResponseException(HttpStatusCode.BadRequest, ExceptionResponseType.DbInsert, query.Exception);

			return new ResponseCommon<[EntityName]CreateDto>
			{
				Data = entity.Adapt<[EntityName]CreateDto>(),
				IsSuccess = true,
				StatusCode = HttpStatusCode.Created,
			};

		}
		public async Task<ResponseCommon> Get(int id)
		{
			var entity = await _repository.GetAsync(new RepositoryGetRequest<[EntityName]> { AsNoTracking = true, Filter = x => x.Id == id });

			if (entity == null)
				throw new ResponseException(HttpStatusCode.NotFound, ExceptionResponseType.DbNotFound, null);

			return new ResponseCommon<[EntityName]GetDto>
			{
				Data = entity.Adapt<[EntityName]GetDto>(),
				IsSuccess = true,
				StatusCode = HttpStatusCode.OK,
			};
		}
		public async Task<ResponseCommon> HardDelete(int id)
		{
			var entity = await _repository.GetAsync(new RepositoryGetRequest<[EntityName]> { AsNoTracking = false, Filter = x => x.Id == id });

			if (entity == null)
				throw new ResponseException(HttpStatusCode.NotFound, ExceptionResponseType.DbNotFound, null);

			_repository.Delete(new RepositoryDeleteRequest<[EntityName]> { Model = entity });

			var query = await _unitOfWork.SaveChangesAsync();

			if (query.Exception != null || query.Result < 1)
				throw new ResponseException(HttpStatusCode.BadRequest, ExceptionResponseType.DbDelete, query.Exception);

			return new ResponseCommon
			{
				IsSuccess = true,
				StatusCode = HttpStatusCode.OK
			};
		}
		public async Task<ResponseCommon> SoftDelete(int id)
		{
			var entity = await _repository.GetAsync(new RepositoryGetRequest<[EntityName]>() { AsNoTracking = false, Filter = x => x.Id == id });

			if (entity == null)
				throw new ResponseException(HttpStatusCode.NotFound, ExceptionResponseType.DbNotFound, null);

			_repository.SoftDelete(new RepositorySoftDeleteRequest<[EntityName]>() { Model = entity });

			var query = await _unitOfWork.SaveChangesAsync();

			if (query.Exception != null || query.Result < 1)
				throw new ResponseException(HttpStatusCode.BadRequest, ExceptionResponseType.DbDelete, query.Exception);

			return new ResponseCommon
			{
				IsSuccess = true,
				StatusCode = HttpStatusCode.OK,
			};
		}
		public async Task<ResponseCommon<List<[EntityName]GetListDto>>> ListTable(RepositoryListAsTResultRequest<[EntityName],[EntityName]GetListDto> model)
		{
			var entities = await _repository.ListAsync(model).ToListAsync();

			return new ResponseCommon<List<[EntityName]GetListDto>>
			{
				Data = entities,
				IsSuccess = true,
				StatusCode = HttpStatusCode.OK
			};
		}
		public async Task<ResponseCommon<[EntityName]UpdateDto>> Update(int id,[EntityName]UpdateDto model)
		{
			var entity = await _repository.GetAsync(new RepositoryGetRequest<[EntityName]> { AsNoTracking = false, Filter = x => x.Id == id });

			if (entity == null)
				throw new ResponseException(HttpStatusCode.NotFound, ExceptionResponseType.DbNotFound, null);

			entity = model.Adapt<[EntityName]UpdateDto,[EntityName]>(entity, new TypeAdapterConfig
			{
			});

			_repository.Update(new RepositoryUpdateRequest<[EntityName]> { Model = entity });

			var query = await _unitOfWork.SaveChangesAsync();

			if (query.Exception != null || query.Result < 1)
				throw new ResponseException(HttpStatusCode.BadRequest, ExceptionResponseType.DbUpdate, query.Exception);

			return new ResponseCommon<[EntityName]UpdateDto>
			{
				Data = entity.Adapt<[EntityName]UpdateDto>(),
				IsSuccess = true,
				StatusCode = HttpStatusCode.OK,
			};
		}
	}
}