using System.Reflection;
using System.Xml.Linq;
class Program
{
	 static void Main()
	 {
		string projectName = "Mssssst";
		string outputFolderPath = "C:\\Users\\ygmr4\\Desktop\\" + projectName;

		// Find class name from domain.entities layer | used as general
		var entities = GetTypesFromAssembly("Mssssst.Entities", "Mssssst.Entities");
		string dtoFolderPath = Path.Combine(outputFolderPath, projectName + ".Bll.Dtos"); ;
		string csprojDtoFilePath = Path.Combine(outputFolderPath,dtoFolderPath, projectName + ".Bll.Dtos.csproj");

		string dalFolderPath = Path.Combine(outputFolderPath, projectName + ".Dal");
		string csprojDalFilePath = Path.Combine(outputFolderPath, dalFolderPath, projectName + ".Dal.csproj");

		string bllFolderPath = Path.Combine(outputFolderPath, projectName + ".Bll");
		string csprojBllFilePath = Path.Combine(outputFolderPath, bllFolderPath, projectName + ".Bll.csproj"); 

		GenerateDtos(csprojDtoFilePath, dtoFolderPath, entities, projectName);
		GenerateDal(csprojDalFilePath, dalFolderPath, entities, projectName);
		GenerateBll(csprojBllFilePath, bllFolderPath, entities, projectName);
	 }

	#region Assembly Load
	static List<Type> GetTypesFromAssembly(string assemblyName, string typeNameStart)
	{
		return Assembly.Load(assemblyName)
			.GetTypes()
			.Where(x => x.FullName.StartsWith(typeNameStart))
			.ToList();
	}
	#endregion

	#region Generate Bll.Dto
	static void GenerateDtos(string csprojFilePath, string rootFolderPath, IEnumerable<Type> entities, string currentProjectName)
	{
		XDocument csprojDoc = XDocument.Load(csprojFilePath);

		XElement itemGroup = csprojDoc.Root.Elements("ItemGroup").FirstOrDefault();
		if (itemGroup == null)
		{
			itemGroup = new XElement("ItemGroup");
			csprojDoc.Root.Add(itemGroup);
		}

		foreach (var entity in entities)
		{
			string folderPath = Path.Combine(rootFolderPath, entity.Name + "Dtos");

			EnsureDirectoryExists(folderPath);

			string createDtoClass = Path.Combine(folderPath, $"{entity.Name}CreateDto.cs");
			string readDtoClass = Path.Combine(folderPath, $"{entity.Name}ReadDto.cs");
			string updateDtoClass = Path.Combine(folderPath, $"{entity.Name}UpdateDto.cs");
			string getDtoClass = Path.Combine(folderPath, $"{entity.Name}GetDto.cs");
			string getListDtoClass = Path.Combine(folderPath, $"{entity.Name}GetListDto.cs");

			if (entity.Name != "BaseEntity")
			{
				EnsureFileExists(createDtoClass, File.ReadAllText("./Templates/CreateDto.txt")
					.Replace("[CurrentProjectName]", currentProjectName)
					.Replace("[EntityName]", entity.Name + "CreateDto"));

				EnsureFileExists(readDtoClass, File.ReadAllText("./Templates/CreateDto.txt")
					.Replace("[CurrentProjectName]", currentProjectName)
					.Replace("[EntityName]", entity.Name + "ReadDto"));

				EnsureFileExists(updateDtoClass, File.ReadAllText("./Templates/CreateDto.txt")
					.Replace("[CurrentProjectName]", currentProjectName)
					.Replace("[EntityName]", entity.Name + "UpdateDto"));

				EnsureFileExists(getDtoClass, File.ReadAllText("./Templates/CreateDto.txt")
					.Replace("[CurrentProjectName]", currentProjectName)
					.Replace("[EntityName]", entity.Name + "GetDto"));

				EnsureFileExists(getListDtoClass, File.ReadAllText("./Templates/CreateDto.txt")
					.Replace("[CurrentProjectName]", currentProjectName)
					.Replace("[EntityName]", entity.Name + "GetListDto"));
			}
		}
		csprojDoc.Save(csprojFilePath);
	}
	#endregion
	#region Generate Bll

	static void GenerateBll(string csprojFilePath, string rootFolderPath, IEnumerable<Type> entities, string currentProjectName)
	{
		XDocument csprojDoc = XDocument.Load(csprojFilePath);
		XElement itemGroup = csprojDoc.Root.Elements("ItemGroup").FirstOrDefault();
		if (itemGroup == null)
		{
			itemGroup = new XElement("ItemGroup");
			csprojDoc.Root.Add(itemGroup);
		}

		string serviceFolderPath = Path.Combine(rootFolderPath, "Services", "Concrete");
		string iServiceFolderPath = Path.Combine(rootFolderPath, "Services", "Abstract");
		string modelsFolderPath = Path.Combine(rootFolderPath, "Models");
		string enumsFolderPath = Path.Combine(rootFolderPath, "Enums");
		string commonServiceFolderPath = Path.Combine(rootFolderPath, "Services", "Common");

		EnsureDirectoryExists(serviceFolderPath);
		EnsureDirectoryExists(iServiceFolderPath);
		EnsureDirectoryExists(modelsFolderPath);
		EnsureDirectoryExists(enumsFolderPath);
		EnsureDirectoryExists(commonServiceFolderPath);

		foreach (var entity in entities)
		{
			string serviceClass = Path.Combine(serviceFolderPath, $"{entity.Name}Service.cs");
			string iServiceClass = Path.Combine(iServiceFolderPath, $"I{entity.Name}Service.cs");
			string jwtSettingsClass = Path.Combine(modelsFolderPath, "JwtSettings.cs");
			string emailSettingsClass = Path.Combine(modelsFolderPath, "EmailSettings.cs");
			string responseCommonClass = Path.Combine(modelsFolderPath, "ResponseCommon.cs");
			string responseExceptionClass = Path.Combine(modelsFolderPath, "ResponseException.cs");
			string responseTypeClass = Path.Combine(enumsFolderPath, "ExceptionResponseType.cs");
			string exceptionDataClass = Path.Combine(modelsFolderPath, "ResponseExceptionData.cs");
			string smsNetGsmClass = Path.Combine(modelsFolderPath, "SmsNetGsmSettings.cs");
			string emailServiceClass = Path.Combine(commonServiceFolderPath, "EmailService.cs");
			string memoryCacheClass = Path.Combine(commonServiceFolderPath, "MemoryCacheService.cs");
			string smsNetGsmServiceClass = Path.Combine(commonServiceFolderPath, "SmsNetGsmService.cs");
			string tokenServiceClass = Path.Combine(commonServiceFolderPath, "TokenService.cs");

			if (entity.Name != "BaseEntity")
			{
				EnsureFileExists(serviceClass, File.ReadAllText("./Templates/Service.txt")
					.Replace("[CurrentProjectName]", currentProjectName)
					.Replace("[EntityName]", entity.Name));

				EnsureFileExists(iServiceClass, File.ReadAllText("./Templates/IService.txt")
					.Replace("[CurrentProjectName]", currentProjectName)
					.Replace("[EntityName]", entity.Name));

				EnsureFileExists(jwtSettingsClass, File.ReadAllText("./Templates/JwtSettings.txt")
					.Replace("[CurrentProjectName]", currentProjectName)
					.Replace("[EntityName]", entity.Name));

				EnsureFileExists(emailSettingsClass, File.ReadAllText("./Templates/EmailSettings.txt")
					.Replace("[CurrentProjectName]", currentProjectName)
					.Replace("[EntityName]", entity.Name));

				EnsureFileExists(responseCommonClass, File.ReadAllText("./Templates/ResponseCommon.txt")
					.Replace("[CurrentProjectName]", currentProjectName)
					.Replace("[EntityName]", entity.Name));

				EnsureFileExists(responseExceptionClass, File.ReadAllText("./Templates/ResponseException.txt")
					.Replace("[CurrentProjectName]", currentProjectName)
					.Replace("[EntityName]", entity.Name));

				EnsureFileExists(responseTypeClass, File.ReadAllText("./Templates/ExceptionResponseType.txt")
					.Replace("[CurrentProjectName]", currentProjectName)
					.Replace("[EntityName]", entity.Name));

				EnsureFileExists(exceptionDataClass, File.ReadAllText("./Templates/ResponseExceptionData.txt")
					.Replace("[CurrentProjectName]", currentProjectName)
					.Replace("[EntityName]", entity.Name));

				EnsureFileExists(smsNetGsmClass, File.ReadAllText("./Templates/SmsNetGsm.txt")
					.Replace("[CurrentProjectName]", currentProjectName)
					.Replace("[EntityName]", entity.Name));

				EnsureFileExists(emailServiceClass, File.ReadAllText("./Templates/EmailService.txt")
					.Replace("[CurrentProjectName]", currentProjectName)
					.Replace("[EntityName]", entity.Name));

				EnsureFileExists(memoryCacheClass, File.ReadAllText("./Templates/MemoryCacheService.txt")
					.Replace("[CurrentProjectName]", currentProjectName)
					.Replace("[EntityName]", entity.Name));

				EnsureFileExists(smsNetGsmServiceClass, File.ReadAllText("./Templates/SmsNetGsmService.txt")
					.Replace("[CurrentProjectName]", currentProjectName)
					.Replace("[EntityName]", entity.Name));

				EnsureFileExists(tokenServiceClass, File.ReadAllText("./Templates/TokenService.txt")
					.Replace("[CurrentProjectName]", currentProjectName)
					.Replace("[EntityName]", entity.Name));
			}
		}
		csprojDoc.Save(csprojFilePath);
	}

	#endregion

	#region Generate Dal
	static void GenerateDal(string csprojFilePath, string rootFolderPath, IEnumerable<Type> entities, string currentProjectName)
	{
		string connectionString = "User ID=postgres;Password=12345;Host=localhost;Port=5432;Database=visdb;";

		XDocument csprojDoc = XDocument.Load(csprojFilePath);
		XElement itemGroup = csprojDoc.Root.Elements("ItemGroup").FirstOrDefault();
		if (itemGroup == null)
		{
			itemGroup = new XElement("ItemGroup");
			csprojDoc.Root.Add(itemGroup);
		}

		string folderDalReposPath = Path.Combine(rootFolderPath, "Data", "DalRepos");
		string folderIDalReposPath = Path.Combine(rootFolderPath, "Data", "IDalRepos");
		string commonFolderPath = Path.Combine(rootFolderPath, "Data", "Common");
		string contextFolderPath = Path.Combine(rootFolderPath, "Context");

		EnsureDirectoryExists(folderDalReposPath);
		EnsureDirectoryExists(folderIDalReposPath);
		EnsureDirectoryExists(commonFolderPath);
		EnsureDirectoryExists(contextFolderPath);

		foreach (var entity in entities)
		{
			// Create empty C# class files for dalRepos and IDalRepos
			string dalReposClass = Path.Combine(folderDalReposPath, $"{entity.Name}Repository.cs");
			string iDalReposClass = Path.Combine(folderIDalReposPath, $"I{entity.Name}Repository.cs");
			string repositoryClass = Path.Combine(commonFolderPath, "Repository.cs");
			string unitOfWorkClass = Path.Combine(commonFolderPath, "UnitOfWork.cs");
			string contextClass = Path.Combine(contextFolderPath, "Context.cs");

			if (entity.Name != "BaseEntity")
			{
				EnsureFileExists(iDalReposClass, File.ReadAllText("./Templates/IDalRepository.txt")
					.Replace("[CurrentProjectName]", currentProjectName)
					.Replace("[EntityName]", entity.Name));

				EnsureFileExists(dalReposClass, File.ReadAllText("./Templates/DalRepository.txt")
					.Replace("[CurrentProjectName]", currentProjectName)
					.Replace("[EntityName]", entity.Name)
					.Replace("[DbContext]", currentProjectName));

				EnsureFileExists(repositoryClass, File.ReadAllText("./Templates/Repository.txt")
					.Replace("[CurrentProjectName]", currentProjectName)
					.Replace("[EntityName]", entity.Name));

				EnsureFileExists(unitOfWorkClass, File.ReadAllText("./Templates/UnitOfWork.txt")
					.Replace("[CurrentProjectName]", currentProjectName)
					.Replace("[EntityName]", "UnitOfWork")
					.Replace("[DbContext]", currentProjectName + "DbContext"));

				EnsureFileExists(contextClass, File.ReadAllText("./Templates/Context.txt")
					 .Replace("[CurrentProjectName]", currentProjectName)
					 .Replace("[EntityName]", entity.Name)
					 .Replace("[DbSetLine]", $"public DbSet<{entity.Name}> {entity.Name}Table {{ get; set; }}")
					 .Replace("[ConnectionString]", connectionString));
			}
		}
		csprojDoc.Save(csprojFilePath);
	}
	#endregion

	#region Helper Methods
	static void EnsureFileExists(string filePath, string content)
	{
		if (!File.Exists(filePath))
		{
			File.WriteAllText(filePath, content);
		}
	}

	static void EnsureDirectoryExists(string directoryPath)
	{
		if (!Directory.Exists(directoryPath))
		{
			Directory.CreateDirectory(directoryPath);
		}
	}
	#endregion
}	